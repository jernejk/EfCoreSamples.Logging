using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;

namespace Microsoft.Extensions.Logging;

public static class LoggingExtensions
{
    /// <summary>
    /// Use your own log scope. This will add additional property (scope) with scopeValue
    /// </summary>
    /// <param name="logger">The ILogger</param>
    /// <param name="scope">Scope property name</param>
    /// <param name="scopeValue">Scope property value</param>
    public static IDisposable LogScope(this ILogger logger, string scope, string scopeValue)
        => logger.BeginScope(new Dictionary<string, object> { { scope, scopeValue } });

    /// <summary>
    /// Use a query log scope.
    /// It will "Query" property to all logs inside this scope with queryName as the value.
    /// </summary>
    /// <param name="logger">The ILogger</param>
    /// <param name="queryName">Scope property value</param>
    public static IDisposable QueryScope(this ILogger logger, string queryName)
        => LogScope(logger, "Query", queryName);

    /// <summary>
    /// Use a query log scope auto-generated based on the class and method name.
    /// It will "Query" property to all logs inside this scope with "Class-Method" as the value.
    /// </summary>
    /// <example>
    /// // This will do the following:
    /// // 1. Add property "Query" with value "TwitterService-GetTweets"
    /// // 2. Add "-- TwitterService-GetTweets" comment to SQL due to `.TagWith(logScope)`
    /// public class TwitterService
    /// {
    ///     public Task<IEnumerable<Tweet>> GetTweets(CancellationToken ct)
    ///     {
    ///         using var _ = _logger.QueryScope(out string logScope);
    ///         return await _context.Tweets
    ///             .TagWith(logScope)
    ///             .AsNoTracking()
    ///             .ToListAsync(ct);
    ///     }
    /// }
    /// </example>
    /// <param name="logger">The ILogger</param>
    /// <param name="logScopeName">Return generated scope property value based on class and method name</param>
    /// <param name="callerFileName">Caller filename generated by the compiler.</param>
    /// <param name="callerName">Caller method name generated by the compiler</param>
    public static IDisposable QueryScope(this ILogger logger, out string logScopeName, [CallerFilePath] string callerFileName = "", [CallerMemberName] string callerName = "")
    {
        logScopeName = GenerateLogScopeName(null, callerFileName, callerName);
        return QueryScope(logger, logScopeName);
    }

    public static string GenerateLogScopeNameFromContext(string message = null, [CallerFilePath] string callerFileName = "", [CallerMemberName] string callerName = "")
        => GenerateLogScopeName(message, callerFileName, callerName);

    public static string GenerateLogScopeName(string message = null, string callerFileName = "", string callerName = "")
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            message = "-" + message;
        }

        var className = Path.GetFileNameWithoutExtension(callerFileName);
        return className + "-" + callerName + message;
    }
}
